// Code generated by MockGen. DO NOT EDIT.
// Source: helper/interfaces.go

// Package helper is a generated GoMock package.
package helper

import (
	reflect "reflect"

	jwt "github.com/dgrijalva/jwt-go"
	gomock "github.com/golang/mock/gomock"
)

// MockHelperInterface is a mock of HelperInterface interface.
type MockHelperInterface struct {
	ctrl     *gomock.Controller
	recorder *MockHelperInterfaceMockRecorder
}

// MockHelperInterfaceMockRecorder is the mock recorder for MockHelperInterface.
type MockHelperInterfaceMockRecorder struct {
	mock *MockHelperInterface
}

// NewMockHelperInterface creates a new mock instance.
func NewMockHelperInterface(ctrl *gomock.Controller) *MockHelperInterface {
	mock := &MockHelperInterface{ctrl: ctrl}
	mock.recorder = &MockHelperInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockHelperInterface) EXPECT() *MockHelperInterfaceMockRecorder {
	return m.recorder
}

// ComparePassword mocks base method.
func (m *MockHelperInterface) ComparePassword(hashedPassword, password string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ComparePassword", hashedPassword, password)
	ret0, _ := ret[0].(error)
	return ret0
}

// ComparePassword indicates an expected call of ComparePassword.
func (mr *MockHelperInterfaceMockRecorder) ComparePassword(hashedPassword, password interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ComparePassword", reflect.TypeOf((*MockHelperInterface)(nil).ComparePassword), hashedPassword, password)
}

// GenerateJWT mocks base method.
func (m *MockHelperInterface) GenerateJWT(userId string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GenerateJWT", userId)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GenerateJWT indicates an expected call of GenerateJWT.
func (mr *MockHelperInterfaceMockRecorder) GenerateJWT(userId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GenerateJWT", reflect.TypeOf((*MockHelperInterface)(nil).GenerateJWT), userId)
}

// HashPassword mocks base method.
func (m *MockHelperInterface) HashPassword(password string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "HashPassword", password)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// HashPassword indicates an expected call of HashPassword.
func (mr *MockHelperInterfaceMockRecorder) HashPassword(password interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HashPassword", reflect.TypeOf((*MockHelperInterface)(nil).HashPassword), password)
}

// ParseJWT mocks base method.
func (m *MockHelperInterface) ParseJWT(tokenString string) (jwt.MapClaims, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ParseJWT", tokenString)
	ret0, _ := ret[0].(jwt.MapClaims)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ParseJWT indicates an expected call of ParseJWT.
func (mr *MockHelperInterfaceMockRecorder) ParseJWT(tokenString interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ParseJWT", reflect.TypeOf((*MockHelperInterface)(nil).ParseJWT), tokenString)
}
